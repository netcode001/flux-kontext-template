# Cursor Rules for Next.js 15 + TypeScript Project


 穷尽一切方法思考，chat上下文中文Always respond in 中文，对话框讨论永远用Chinese回复我，
 代码中只能用中文注释但是网页文案不能有中文；永远只使用3000端口不新增端口运行，3000端口一直在启动所以不需要新增服务器启动，
 你可以查看所有文件来检查并修改直到项目不再出现错误，每次项目更新和改动也都写到readme1.md文档里面，如果 GitHub 的项目地址上没有 readme1.md，就新建一个 readme1.md 文档，每个步骤都一定要上传到GIT的默认MASTER分支并写好COMMIT MESSAGES以放在代码改崩方便备份恢复，不要直接问我要很多规则和答案，而是帮我规划好不同方案，一步步排查所有可能问题，但是绝不能擅自轻易删除任何文件，删改文件必须在跟我确认之后再去执行
 ，每个步骤都一定要上传到GIT的默认MASTER分支并写好COMMIT MESSAGES以放在代码改崩方便备份恢复，不要直接问我要很多规则和答案，而是帮我规划好不同方案，一步步排查所有可能问题，但是绝不能擅自轻易删除任何文件，删改文件必须在跟我确认之后再去执行
，遇到需要我提供信息的一定要询问我，挨个给我解释代码文件和逻辑结构，不能基于任何假设来做代码修改, 必须查看代码文件结构去确认实际情况, 最后再去执行所有代码修改的动作，一旦出现解决不了的复杂项目就打印函数和程序调用链自己来分析：修复三律：1️⃣ 精：复杂度≤原方案80%，2️⃣ 准：直击根本原因 ，3️⃣ 净：0技术债务(SonarQube✔️)，⚙️ 三步走：① 溯源 → 函数，方法调用链→ 错误触发路径  ② 拆解 → 给出3个SOLID++方案，不能基于任何假设前提条件，必须要跟我确认具体的API和项目文档，不需要重启开发服务器，一直保持3000端口打开即可，像小白一样教导我所有基础理论知识， 绝不能擅自轻易删除任何文件，删改文件必须在跟我确认之后再去执行，先仔细阅读所有项目文件查看相关代码搞清楚所有情况和错误问题本质原因和可能解决方案再跟我确认后去动手删改代码哈

注意错误：添加 "use client" 指令时，不能同时导出 metadata，因为 metadata 只能在服务器组件中使用


  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.    
  

## 🚨 Critical Next.js Rules

### 1. "use client" vs metadata 冲突规则
- ❌ **绝对禁止**: 在同一个文件中同时使用 `"use client"` 和 `export const metadata`
- ✅ **正确做法**: 
  - 服务器组件: 只处理 metadata，不使用 "use client"
  - 客户端组件: 只处理交互逻辑，使用 "use client"
- 🔧 **解决方案**: 页面分离架构
  ```typescript
  // ✅ 服务器组件 (page.tsx)
  import type { Metadata } from 'next'
  import { PageContent } from '@/components/PageContent'
  
  export const metadata: Metadata = { /* SEO配置 */ }
  export default function Page() {
    return <PageContent />
  }
  
  // ✅ 客户端组件 (PageContent.tsx)
  "use client"
  import { useState } from "react"
  export function PageContent() {
    // 所有交互逻辑
  }
  ```

### 2. Next.js App Router 架构规则
- ✅ **layout.tsx**: 只能是服务器组件，处理全局配置
- ✅ **page.tsx**: 优先使用服务器组件，需要交互时分离为客户端组件
- ✅ **loading.tsx**: 服务器组件，处理加载状态
- ✅ **error.tsx**: 必须是客户端组件 ("use client")
- ✅ **not-found.tsx**: 服务器组件

### 3. 组件命名和导出规则
- ✅ **页面组件**: 使用 default export
- ✅ **可复用组件**: 使用 named export
- ✅ **客户端组件**: 文件名以 Content.tsx 结尾 (如 DashboardContent.tsx)
- ✅ **服务器组件**: 直接使用 page.tsx 或组件名.tsx

### 4. TypeScript 和导入规则
- ✅ **类型导入**: 使用 `import type { Metadata } from 'next'`
- ✅ **组件导入**: 使用 `import { Component } from '@/components/Component'`
- ✅ **避免循环依赖**: 检查导入路径，避免 A→B→A 的循环

### 5. 状态管理规则
- ✅ **useState/useEffect**: 只能在客户端组件中使用
- ✅ **usePathname/useRouter**: 只能在客户端组件中使用
- ✅ **服务器组件**: 只能使用 async/await 和服务器端 API

## 🎯 常见错误和解决方案

### 错误1: Event handlers in Server Components
```typescript
// ❌ 错误
export default function Page() {
  return <button onClick={() => {}}>Click</button>
}

// ✅ 正确
"use client"
export function PageContent() {
  return <button onClick={() => {}}>Click</button>
}
```

### 错误2: Hooks in Server Components
```typescript
// ❌ 错误
export default function Page() {
  const [state, setState] = useState(false)
  return <div>{state}</div>
}

// ✅ 正确
"use client"
export function PageContent() {
  const [state, setState] = useState(false)
  return <div>{state}</div>
}
```

### 错误3: Script onLoad in Server Components
```typescript
// ❌ 错误
<Script src="..." onLoad={() => {}} />

// ✅ 正确
<Script src="..." strategy="lazyOnload" />
```

## 🔧 代码质量规则

### 1. 中文注释规则
- ✅ **代码注释**: 必须使用中文
- ✅ **网页文案**: 必须使用英文
- ✅ **变量名**: 使用英文
- ✅ **函数名**: 使用英文

### 2. 端口和服务器规则
- ✅ **固定端口**: 永远只使用 3000 端口
- ✅ **不新增端口**: 不创建新的服务器端口
- ✅ **保持运行**: 3000 端口一直保持启动状态

### 3. Git 提交规则
- ✅ **每次更新**: 必须提交到 Git 默认 master 分支
- ✅ **Commit 格式**: 使用中文描述具体改动
- ✅ **更新文档**: 每次项目更新都要更新 README.md

## 🚀 性能优化规则

### 1. 组件优化
- ✅ **动态导入**: 大型组件使用 `dynamic(() => import())`
- ✅ **Suspense**: 客户端组件包装在 Suspense 中
- ✅ **避免过度使用**: 最小化 "use client" 的使用

### 2. 图片优化
- ✅ **Next.js Image**: 使用 `next/image` 组件
- ✅ **WebP格式**: 优先使用 WebP 格式
- ✅ **懒加载**: 启用图片懒加载

## 📝 文档更新规则

### 1. README.md 更新
- ✅ **功能变更**: 每次功能更新都要记录
- ✅ **技术债务**: 记录已知问题和解决方案
- ✅ **版本信息**: 更新版本号和更新日志

### 2. 错误处理
- ✅ **三律原则**: 精(复杂度≤80%)、准(直击根因)、净(0技术债务)
- ✅ **三步走**: 溯源→拆解→执行
- ✅ **不基于假设**: 必须查看实际代码文件确认情况 

# 🛡️ Next.js 15 + TypeScript 安全开发规则
# 基于R2存储安全漏洞教训制定的全面安全开发清单

## 🔐 核心安全原则

### 1. 权限优先原则 (Permission First)
- ❌ **绝对禁止**: 任何涉及资源操作的API都必须先验证用户权限
- ❌ **绝对禁止**: 前端组件假设用户已登录而不检查session状态
- ✅ **必须遵循**: API-First安全验证，前端验证仅作为用户体验优化

### 2. 深度防御原则 (Defense in Depth)
- ✅ **多层验证**: 前端验证 + API验证 + 数据库约束
- ✅ **失败安全**: 验证失败时拒绝操作，而不是允许操作
- ✅ **最小权限**: 用户只能访问其有权限的资源

## 📤 文件上传安全规则

### ⚠️ 高风险操作检查清单
```typescript
// ❌ 危险示例 - 直接上传无验证
export async function POST(request: NextRequest) {
  const file = formData.get('file') as File
  await uploadToStorage(file) // 🚨 安全漏洞！
}

// ✅ 安全示例 - 完整验证流程
export async function POST(request: NextRequest) {
  // 1. 🔐 用户认证验证
  const session = await getServerSession(authOptions)
  if (!session?.user) {
    return NextResponse.json({ error: '请先登录' }, { status: 401 })
  }
  
  // 2. 🛡️ 文件类型验证
  const file = formData.get('file') as File
  if (!ALLOWED_FILE_TYPES.includes(file.type)) {
    return NextResponse.json({ error: '不支持的文件类型' }, { status: 400 })
  }
  
  // 3. 📏 文件大小验证
  if (file.size > MAX_FILE_SIZE) {
    return NextResponse.json({ error: '文件过大' }, { status: 400 })
  }
  
  // 4. 🔍 内容安全检查
  const isContentSafe = await validateFileContent(file)
  if (!isContentSafe) {
    return NextResponse.json({ error: '文件内容不合规' }, { status: 400 })
  }
  
  // 5. 📊 用户配额检查
  const canUpload = await checkUserUploadQuota(session.user.id)
  if (!canUpload) {
    return NextResponse.json({ error: '上传配额已用完' }, { status: 429 })
  }
  
  // 6. 💾 执行上传操作
  const result = await uploadToStorage(file, session.user.id)
  return NextResponse.json({ success: true, data: result })
}
```

### 📋 文件上传必备验证清单
- [ ] ✅ 用户登录状态验证 (`getServerSession`)
- [ ] ✅ 文件类型白名单验证 (`ALLOWED_FILE_TYPES`)
- [ ] ✅ 文件大小限制验证 (`MAX_FILE_SIZE`)
- [ ] ✅ 文件内容安全扫描 (`validateFileContent`)
- [ ] ✅ 用户上传配额检查 (`checkUserUploadQuota`)
- [ ] ✅ 文件命名和路径安全 (`sanitizeFileName`)
- [ ] ✅ 上传记录审计日志 (`logUploadActivity`)

## 🔑 API权限验证规则

### 🚨 强制安全检查
```typescript
// 每个API路由都必须包含的安全检查模板
export async function POST/GET/PUT/DELETE(request: NextRequest) {
  try {
    // 🔐 第一步：用户认证
    const session = await getServerSession(authOptions)
    if (!session?.user) {
      return unauthorizedResponse('用户未登录')
    }
    
    // 🛡️ 第二步：权限授权
    const hasPermission = await checkUserPermission(session.user.id, 'required_permission')
    if (!hasPermission) {
      return forbiddenResponse('权限不足')
    }
    
    // 📝 第三步：输入验证
    const validation = await validateRequestData(request)
    if (!validation.success) {
      return badRequestResponse(validation.errors)
    }
    
    // 🔍 第四步：资源权限检查（如果操作特定资源）
    if (resourceId) {
      const canAccessResource = await checkResourcePermission(session.user.id, resourceId)
      if (!canAccessResource) {
        return forbiddenResponse('无权访问该资源')
      }
    }
    
    // ✅ 执行业务逻辑
    const result = await businessLogic(validatedData)
    
    // 📊 记录操作日志
    await logUserActivity(session.user.id, 'operation_type', { resourceId, result })
    
    return successResponse(result)
    
  } catch (error) {
    // 🚨 错误处理和日志记录
    await logError('API_ERROR', error, { userId: session?.user?.id, endpoint: request.url })
    return internalErrorResponse('操作失败')
  }
}
```

### 📋 API安全验证清单
- [ ] ✅ 用户认证验证 (`getServerSession`)
- [ ] ✅ 权限授权检查 (`checkUserPermission`)
- [ ] ✅ 输入数据验证 (`validateRequestData`)
- [ ] ✅ 资源权限验证 (`checkResourcePermission`)
- [ ] ✅ 速率限制检查 (`rateLimitCheck`)
- [ ] ✅ CSRF保护验证 (`csrfProtection`)
- [ ] ✅ 操作审计日志 (`logUserActivity`)
- [ ] ✅ 错误处理日志 (`logError`)

## 🎨 前端组件安全规则

### 🔐 组件权限检查模板
```typescript
export function SecureComponent({ onAction }: Props) {
  const { data: session, status } = useSession()
  
  // 🔄 加载状态处理
  if (status === 'loading') {
    return <LoadingState />
  }
  
  // 🔐 未登录状态处理
  if (!session) {
    return <LoginPromptUI />
  }
  
  // 🛡️ 权限检查
  const hasPermission = useUserPermission('required_permission')
  if (!hasPermission) {
    return <InsufficientPermissionUI />
  }
  
  // ✅ 正常组件渲染
  return <AuthorizedComponent onAction={onAction} />
}
```

### 📋 前端安全检查清单
- [ ] ✅ Session状态检查 (`useSession`)
- [ ] ✅ 加载状态处理 (`status === 'loading'`)
- [ ] ✅ 未登录UI展示 (`LoginPromptUI`)
- [ ] ✅ 权限状态检查 (`useUserPermission`)
- [ ] ✅ 权限不足UI展示 (`InsufficientPermissionUI`)
- [ ] ✅ 敏感操作二次确认 (`confirmAction`)
- [ ] ✅ 客户端数据验证 (`validateClientData`)

## 🗄️ 数据库操作安全规则

### 🔒 数据库安全模板
```typescript
// ✅ 安全的数据库操作示例
export async function createPost(userId: string, postData: PostData) {
  // 🔐 用户权限验证
  const user = await getUserById(userId)
  if (!user || user.status !== 'active') {
    throw new UnauthorizedError('用户状态异常')
  }
  
  // 🛡️ 数据验证和清理
  const validatedData = await validateAndSanitizePostData(postData)
  
  // 📊 配额检查
  const canCreatePost = await checkUserPostQuota(userId)
  if (!canCreatePost) {
    throw new QuotaExceededError('发布配额已用完')
  }
  
  // 💾 事务性操作
  return await db.transaction(async (tx) => {
    const post = await tx.posts.create({
      data: {
        ...validatedData,
        userId,
        createdAt: new Date(),
        status: 'pending_review' // 默认需要审核
      }
    })
    
    // 📈 更新用户统计
    await tx.users.update({
      where: { id: userId },
      data: { postsCount: { increment: 1 } }
    })
    
    return post
  })
}
```

### 📋 数据库安全清单
- [ ] ✅ 用户状态验证 (`user.status === 'active'`)
- [ ] ✅ 数据输入验证 (`validateAndSanitizeData`)
- [ ] ✅ SQL注入防护 (`parameterized queries`)
- [ ] ✅ 行级权限控制 (`Row Level Security`)
- [ ] ✅ 事务操作保证 (`db.transaction`)
- [ ] ✅ 软删除策略 (`deleted_at` instead of DELETE)
- [ ] ✅ 审计跟踪记录 (`audit_log`)

## 🔧 第三方服务集成安全规则

### 🌐 外部服务安全模板
```typescript
// ✅ 安全的第三方服务调用
export class SecureExternalService {
  private async callExternalAPI(userId: string, data: any) {
    // 🔐 用户权限验证
    const hasPermission = await this.checkUserPermission(userId, 'external_api_access')
    if (!hasPermission) {
      throw new UnauthorizedError('无权访问外部服务')
    }
    
    // 📊 配额检查
    const canMakeRequest = await this.checkAPIQuota(userId)
    if (!canMakeRequest) {
      throw new QuotaExceededError('API调用配额已用完')
    }
    
    // 🛡️ 数据清理和验证
    const sanitizedData = await this.sanitizeExternalData(data)
    
    // 🔍 敏感信息过滤
    const filteredData = await this.filterSensitiveInfo(sanitizedData)
    
    try {
      // 📡 外部API调用
      const response = await this.makeAPICall(filteredData)
      
      // 📊 记录使用日志
      await this.logAPIUsage(userId, 'external_service', response.status)
      
      return response
    } catch (error) {
      // 🚨 错误日志记录
      await this.logAPIError(userId, 'external_service', error)
      throw error
    }
  }
}
```

### 📋 第三方服务安全清单
- [ ] ✅ API访问权限验证 (`checkUserPermission`)
- [ ] ✅ API调用配额限制 (`checkAPIQuota`)
- [ ] ✅ 敏感数据过滤 (`filterSensitiveInfo`)
- [ ] ✅ 错误信息脱敏 (`sanitizeErrorMessage`)
- [ ] ✅ 重试机制实现 (`retryWithBackoff`)
- [ ] ✅ 超时控制设置 (`requestTimeout`)
- [ ] ✅ 使用日志记录 (`logAPIUsage`)

## 🚨 错误处理和日志安全规则

### 📝 安全日志记录模板
```typescript
// ✅ 安全的错误处理和日志记录
export class SecurityLogger {
  // 🔐 敏感操作日志
  static async logSecurityEvent(
    eventType: 'LOGIN_ATTEMPT' | 'PERMISSION_DENIED' | 'SUSPICIOUS_ACTIVITY',
    userId: string | null,
    details: Record<string, any>,
    request?: NextRequest
  ) {
    const logData = {
      timestamp: new Date().toISOString(),
      eventType,
      userId,
      ip: this.getClientIP(request),
      userAgent: request?.headers.get('user-agent'),
      details: this.sanitizeLogData(details),
      severity: this.getEventSeverity(eventType)
    }
    
    // 📊 写入安全日志
    await this.writeSecurityLog(logData)
    
    // 🚨 高风险事件告警
    if (logData.severity === 'HIGH') {
      await this.sendSecurityAlert(logData)
    }
  }
  
  // 🛡️ 错误信息脱敏
  static sanitizeErrorForUser(error: Error): string {
    // 不向用户暴露内部错误详情
    const safeErrors = [
      'ValidationError',
      'UnauthorizedError',
      'ForbiddenError',
      'NotFoundError'
    ]
    
    if (safeErrors.includes(error.constructor.name)) {
      return error.message
    }
    
    return '系统暂时不可用，请稍后重试'
  }
}
```

### 📋 错误处理和日志清单
- [ ] ✅ 敏感操作日志记录 (`logSecurityEvent`)
- [ ] ✅ 错误信息用户脱敏 (`sanitizeErrorForUser`)
- [ ] ✅ 高风险事件告警 (`sendSecurityAlert`)
- [ ] ✅ 用户IP地址记录 (`getClientIP`)
- [ ] ✅ 请求指纹记录 (`generateRequestFingerprint`)
- [ ] ✅ 日志数据脱敏 (`sanitizeLogData`)
- [ ] ✅ 审计跟踪完整性 (`auditTrail`)

## 🧪 安全测试规则

### ✅ 强制安全测试清单
```typescript
// 每个涉及权限的功能都必须包含的测试用例
describe('Security Tests', () => {
  // 🔐 认证测试
  test('should reject unauthenticated requests', async () => {
    const response = await request(app)
      .post('/api/secure-endpoint')
      .send(validData)
    
    expect(response.status).toBe(401)
    expect(response.body.error).toContain('登录')
  })
  
  // 🛡️ 授权测试
  test('should reject unauthorized users', async () => {
    const response = await request(app)
      .post('/api/admin-endpoint')
      .set('Authorization', `Bearer ${regularUserToken}`)
      .send(validData)
    
    expect(response.status).toBe(403)
    expect(response.body.error).toContain('权限')
  })
  
  // 📝 输入验证测试
  test('should validate malicious input', async () => {
    const maliciousData = {
      title: '<script>alert("xss")</script>',
      content: 'DROP TABLE users;'
    }
    
    const response = await request(app)
      .post('/api/posts')
      .set('Authorization', `Bearer ${validToken}`)
      .send(maliciousData)
    
    expect(response.status).toBe(400)
    expect(response.body.error).toContain('输入验证失败')
  })
  
  // 📊 配额测试
  test('should enforce rate limits', async () => {
    // 快速发送多个请求
    const promises = Array(10).fill(null).map(() =>
      request(app)
        .post('/api/upload')
        .set('Authorization', `Bearer ${validToken}`)
        .attach('file', Buffer.from('test'), 'test.jpg')
    )
    
    const responses = await Promise.all(promises)
    const tooManyRequests = responses.filter(r => r.status === 429)
    
    expect(tooManyRequests.length).toBeGreaterThan(0)
  })
})
```

### 📋 安全测试检查清单
- [ ] ✅ 未认证请求拒绝测试 (`401 tests`)
- [ ] ✅ 未授权访问拒绝测试 (`403 tests`)
- [ ] ✅ 输入验证安全测试 (`XSS/SQL injection tests`)
- [ ] ✅ 文件上传安全测试 (`malicious file tests`)
- [ ] ✅ 速率限制测试 (`rate limit tests`)
- [ ] ✅ 权限边界测试 (`permission boundary tests`)
- [ ] ✅ 数据泄露测试 (`data exposure tests`)

## 📋 代码审查安全检查清单

### 🔍 Pull Request 必备安全审查项目
- [ ] ✅ 所有API都包含用户认证检查
- [ ] ✅ 敏感操作都包含权限验证
- [ ] ✅ 文件上传都包含安全验证
- [ ] ✅ 数据库操作都使用参数化查询
- [ ] ✅ 用户输入都经过验证和清理
- [ ] ✅ 错误信息不暴露敏感数据
- [ ] ✅ 日志记录包含必要的安全信息
- [ ] ✅ 第三方服务调用包含配额限制
- [ ] ✅ 前端组件包含权限状态检查
- [ ] ✅ 安全测试覆盖所有权限场景

## 🚀 部署安全规则

### 🌐 生产环境安全检查清单
- [ ] ✅ 环境变量安全配置 (`env secrets management`)
- [ ] ✅ HTTPS强制启用 (`SSL/TLS`)
- [ ] ✅ 安全头设置 (`Security Headers`)
- [ ] ✅ 防火墙规则配置 (`WAF rules`)
- [ ] ✅ 监控告警设置 (`security monitoring`)
- [ ] ✅ 备份恢复策略 (`backup strategy`)
- [ ] ✅ 日志收集分析 (`log aggregation`)

---

## 🎯 安全开发总结

### 💡 核心原则
1. **永远不信任用户输入** - 所有输入都要验证
2. **API-First安全验证** - 后端是最后防线
3. **最小权限原则** - 只给必需的权限
4. **深度防御策略** - 多层安全验证
5. **失败安全设计** - 出错时拒绝操作
6. **完整审计跟踪** - 记录所有敏感操作

### 🚨 安全红线
- ❌ 任何文件上传都必须验证用户登录状态
- ❌ 任何数据库写操作都必须验证用户权限
- ❌ 任何第三方服务调用都必须有配额限制
- ❌ 任何用户输入都必须经过验证和清理
- ❌ 任何错误信息都不能暴露系统内部信息

### 📚 推荐学习资源
- OWASP Top 10 安全风险
- Next.js Security Best Practices
- TypeScript Security Guidelines
- Node.js Security Checklist 